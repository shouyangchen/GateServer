// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace message {

static const char* VarifyService_method_names[] = {
  "/message.VarifyService/GetVarifyCode",
};

std::unique_ptr< VarifyService::Stub> VarifyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VarifyService::Stub> stub(new VarifyService::Stub(channel, options));
  return stub;
}

VarifyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetVarifyCode_(VarifyService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VarifyService::Stub::GetVarifyCode(::grpc::ClientContext* context, const ::message::GetVarifyReq& request, ::message::GetVarifyRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GetVarifyReq, ::message::GetVarifyRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVarifyCode_, context, request, response);
}

void VarifyService::Stub::async::GetVarifyCode(::grpc::ClientContext* context, const ::message::GetVarifyReq* request, ::message::GetVarifyRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GetVarifyReq, ::message::GetVarifyRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVarifyCode_, context, request, response, std::move(f));
}

void VarifyService::Stub::async::GetVarifyCode(::grpc::ClientContext* context, const ::message::GetVarifyReq* request, ::message::GetVarifyRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVarifyCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GetVarifyRsp>* VarifyService::Stub::PrepareAsyncGetVarifyCodeRaw(::grpc::ClientContext* context, const ::message::GetVarifyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GetVarifyRsp, ::message::GetVarifyReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVarifyCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GetVarifyRsp>* VarifyService::Stub::AsyncGetVarifyCodeRaw(::grpc::ClientContext* context, const ::message::GetVarifyReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVarifyCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

VarifyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VarifyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VarifyService::Service, ::message::GetVarifyReq, ::message::GetVarifyRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VarifyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GetVarifyReq* req,
             ::message::GetVarifyRsp* resp) {
               return service->GetVarifyCode(ctx, req, resp);
             }, this)));
}

VarifyService::Service::~Service() {
}

::grpc::Status VarifyService::Service::GetVarifyCode(::grpc::ServerContext* context, const ::message::GetVarifyReq* request, ::message::GetVarifyRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StatusService_method_names[] = {
  "/message.StatusService/GetChatServer",
  "/message.StatusService/Login",
};

std::unique_ptr< StatusService::Stub> StatusService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StatusService::Stub> stub(new StatusService::Stub(channel, options));
  return stub;
}

StatusService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetChatServer_(StatusService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(StatusService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StatusService::Stub::GetChatServer(::grpc::ClientContext* context, const ::message::GetChatServerReq& request, ::message::GetChatServerRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GetChatServerReq, ::message::GetChatServerRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChatServer_, context, request, response);
}

void StatusService::Stub::async::GetChatServer(::grpc::ClientContext* context, const ::message::GetChatServerReq* request, ::message::GetChatServerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GetChatServerReq, ::message::GetChatServerRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatServer_, context, request, response, std::move(f));
}

void StatusService::Stub::async::GetChatServer(::grpc::ClientContext* context, const ::message::GetChatServerReq* request, ::message::GetChatServerRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GetChatServerRsp>* StatusService::Stub::PrepareAsyncGetChatServerRaw(::grpc::ClientContext* context, const ::message::GetChatServerReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GetChatServerRsp, ::message::GetChatServerReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChatServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GetChatServerRsp>* StatusService::Stub::AsyncGetChatServerRaw(::grpc::ClientContext* context, const ::message::GetChatServerReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChatServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StatusService::Stub::Login(::grpc::ClientContext* context, const ::message::LoginReq& request, ::message::LoginRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::LoginReq, ::message::LoginRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void StatusService::Stub::async::Login(::grpc::ClientContext* context, const ::message::LoginReq* request, ::message::LoginRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::LoginReq, ::message::LoginRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void StatusService::Stub::async::Login(::grpc::ClientContext* context, const ::message::LoginReq* request, ::message::LoginRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::LoginRsp>* StatusService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::message::LoginReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::LoginRsp, ::message::LoginReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::LoginRsp>* StatusService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::message::LoginReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

StatusService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StatusService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StatusService::Service, ::message::GetChatServerReq, ::message::GetChatServerRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StatusService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GetChatServerReq* req,
             ::message::GetChatServerRsp* resp) {
               return service->GetChatServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StatusService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StatusService::Service, ::message::LoginReq, ::message::LoginRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StatusService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::LoginReq* req,
             ::message::LoginRsp* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
}

StatusService::Service::~Service() {
}

::grpc::Status StatusService::Service::GetChatServer(::grpc::ServerContext* context, const ::message::GetChatServerReq* request, ::message::GetChatServerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StatusService::Service::Login(::grpc::ServerContext* context, const ::message::LoginReq* request, ::message::LoginRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* FindOfflineMessagesService_method_names[] = {
  "/message.FindOfflineMessagesService/FindOtherServerOfflineMessages",
  "/message.FindOfflineMessagesService/FindOfflineMessagesNums",
};

std::unique_ptr< FindOfflineMessagesService::Stub> FindOfflineMessagesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FindOfflineMessagesService::Stub> stub(new FindOfflineMessagesService::Stub(channel, options));
  return stub;
}

FindOfflineMessagesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_FindOtherServerOfflineMessages_(FindOfflineMessagesService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindOfflineMessagesNums_(FindOfflineMessagesService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FindOfflineMessagesService::Stub::FindOtherServerOfflineMessages(::grpc::ClientContext* context, const ::message::FindOtherServerOfflineMessagesReq& request, ::message::FindOtherServerOfflineMessagesRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::FindOtherServerOfflineMessagesReq, ::message::FindOtherServerOfflineMessagesRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindOtherServerOfflineMessages_, context, request, response);
}

void FindOfflineMessagesService::Stub::async::FindOtherServerOfflineMessages(::grpc::ClientContext* context, const ::message::FindOtherServerOfflineMessagesReq* request, ::message::FindOtherServerOfflineMessagesRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::FindOtherServerOfflineMessagesReq, ::message::FindOtherServerOfflineMessagesRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindOtherServerOfflineMessages_, context, request, response, std::move(f));
}

void FindOfflineMessagesService::Stub::async::FindOtherServerOfflineMessages(::grpc::ClientContext* context, const ::message::FindOtherServerOfflineMessagesReq* request, ::message::FindOtherServerOfflineMessagesRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindOtherServerOfflineMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::FindOtherServerOfflineMessagesRsp>* FindOfflineMessagesService::Stub::PrepareAsyncFindOtherServerOfflineMessagesRaw(::grpc::ClientContext* context, const ::message::FindOtherServerOfflineMessagesReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::FindOtherServerOfflineMessagesRsp, ::message::FindOtherServerOfflineMessagesReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindOtherServerOfflineMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::FindOtherServerOfflineMessagesRsp>* FindOfflineMessagesService::Stub::AsyncFindOtherServerOfflineMessagesRaw(::grpc::ClientContext* context, const ::message::FindOtherServerOfflineMessagesReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindOtherServerOfflineMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FindOfflineMessagesService::Stub::FindOfflineMessagesNums(::grpc::ClientContext* context, const ::message::FindOfflineMessagesNumsReq& request, ::message::FindOfflineMessagesNumsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::FindOfflineMessagesNumsReq, ::message::FindOfflineMessagesNumsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindOfflineMessagesNums_, context, request, response);
}

void FindOfflineMessagesService::Stub::async::FindOfflineMessagesNums(::grpc::ClientContext* context, const ::message::FindOfflineMessagesNumsReq* request, ::message::FindOfflineMessagesNumsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::FindOfflineMessagesNumsReq, ::message::FindOfflineMessagesNumsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindOfflineMessagesNums_, context, request, response, std::move(f));
}

void FindOfflineMessagesService::Stub::async::FindOfflineMessagesNums(::grpc::ClientContext* context, const ::message::FindOfflineMessagesNumsReq* request, ::message::FindOfflineMessagesNumsRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindOfflineMessagesNums_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::FindOfflineMessagesNumsRsp>* FindOfflineMessagesService::Stub::PrepareAsyncFindOfflineMessagesNumsRaw(::grpc::ClientContext* context, const ::message::FindOfflineMessagesNumsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::FindOfflineMessagesNumsRsp, ::message::FindOfflineMessagesNumsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindOfflineMessagesNums_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::FindOfflineMessagesNumsRsp>* FindOfflineMessagesService::Stub::AsyncFindOfflineMessagesNumsRaw(::grpc::ClientContext* context, const ::message::FindOfflineMessagesNumsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindOfflineMessagesNumsRaw(context, request, cq);
  result->StartCall();
  return result;
}

FindOfflineMessagesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FindOfflineMessagesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FindOfflineMessagesService::Service, ::message::FindOtherServerOfflineMessagesReq, ::message::FindOtherServerOfflineMessagesRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FindOfflineMessagesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::FindOtherServerOfflineMessagesReq* req,
             ::message::FindOtherServerOfflineMessagesRsp* resp) {
               return service->FindOtherServerOfflineMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FindOfflineMessagesService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FindOfflineMessagesService::Service, ::message::FindOfflineMessagesNumsReq, ::message::FindOfflineMessagesNumsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FindOfflineMessagesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::FindOfflineMessagesNumsReq* req,
             ::message::FindOfflineMessagesNumsRsp* resp) {
               return service->FindOfflineMessagesNums(ctx, req, resp);
             }, this)));
}

FindOfflineMessagesService::Service::~Service() {
}

::grpc::Status FindOfflineMessagesService::Service::FindOtherServerOfflineMessages(::grpc::ServerContext* context, const ::message::FindOtherServerOfflineMessagesReq* request, ::message::FindOtherServerOfflineMessagesRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FindOfflineMessagesService::Service::FindOfflineMessagesNums(::grpc::ServerContext* context, const ::message::FindOfflineMessagesNumsReq* request, ::message::FindOfflineMessagesNumsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* TransletMessageService_method_names[] = {
  "/message.TransletMessageService/TransletMessage",
};

std::unique_ptr< TransletMessageService::Stub> TransletMessageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TransletMessageService::Stub> stub(new TransletMessageService::Stub(channel, options));
  return stub;
}

TransletMessageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TransletMessage_(TransletMessageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TransletMessageService::Stub::TransletMessage(::grpc::ClientContext* context, const ::message::TransletMessageReq& request, ::message::TransletMessageRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::TransletMessageReq, ::message::TransletMessageRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TransletMessage_, context, request, response);
}

void TransletMessageService::Stub::async::TransletMessage(::grpc::ClientContext* context, const ::message::TransletMessageReq* request, ::message::TransletMessageRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::TransletMessageReq, ::message::TransletMessageRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransletMessage_, context, request, response, std::move(f));
}

void TransletMessageService::Stub::async::TransletMessage(::grpc::ClientContext* context, const ::message::TransletMessageReq* request, ::message::TransletMessageRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransletMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::TransletMessageRsp>* TransletMessageService::Stub::PrepareAsyncTransletMessageRaw(::grpc::ClientContext* context, const ::message::TransletMessageReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::TransletMessageRsp, ::message::TransletMessageReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TransletMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::TransletMessageRsp>* TransletMessageService::Stub::AsyncTransletMessageRaw(::grpc::ClientContext* context, const ::message::TransletMessageReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransletMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

TransletMessageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TransletMessageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TransletMessageService::Service, ::message::TransletMessageReq, ::message::TransletMessageRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TransletMessageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::TransletMessageReq* req,
             ::message::TransletMessageRsp* resp) {
               return service->TransletMessage(ctx, req, resp);
             }, this)));
}

TransletMessageService::Service::~Service() {
}

::grpc::Status TransletMessageService::Service::TransletMessage(::grpc::ServerContext* context, const ::message::TransletMessageReq* request, ::message::TransletMessageRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SearchUserService_method_names[] = {
  "/message.SearchUserService/SearchUser",
};

std::unique_ptr< SearchUserService::Stub> SearchUserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SearchUserService::Stub> stub(new SearchUserService::Stub(channel, options));
  return stub;
}

SearchUserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SearchUser_(SearchUserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SearchUserService::Stub::SearchUser(::grpc::ClientContext* context, const ::message::SearchUserReq& request, ::message::SearchUserRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::SearchUserReq, ::message::SearchUserRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchUser_, context, request, response);
}

void SearchUserService::Stub::async::SearchUser(::grpc::ClientContext* context, const ::message::SearchUserReq* request, ::message::SearchUserRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::SearchUserReq, ::message::SearchUserRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchUser_, context, request, response, std::move(f));
}

void SearchUserService::Stub::async::SearchUser(::grpc::ClientContext* context, const ::message::SearchUserReq* request, ::message::SearchUserRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::SearchUserRsp>* SearchUserService::Stub::PrepareAsyncSearchUserRaw(::grpc::ClientContext* context, const ::message::SearchUserReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::SearchUserRsp, ::message::SearchUserReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::SearchUserRsp>* SearchUserService::Stub::AsyncSearchUserRaw(::grpc::ClientContext* context, const ::message::SearchUserReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

SearchUserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SearchUserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SearchUserService::Service, ::message::SearchUserReq, ::message::SearchUserRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SearchUserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::SearchUserReq* req,
             ::message::SearchUserRsp* resp) {
               return service->SearchUser(ctx, req, resp);
             }, this)));
}

SearchUserService::Service::~Service() {
}

::grpc::Status SearchUserService::Service::SearchUser(::grpc::ServerContext* context, const ::message::SearchUserReq* request, ::message::SearchUserRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace message

